// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: game/v1/game.proto

package gamev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/shwatanap/connect-tic-tac-toe/src/connect/api/game/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// GameServiceName is the fully-qualified name of the GameService service.
	GameServiceName = "game.v1.GameService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GameServicePlayProcedure is the fully-qualified name of the GameService's Play RPC.
	GameServicePlayProcedure = "/game.v1.GameService/Play"
)

// GameServiceClient is a client for the game.v1.GameService service.
type GameServiceClient interface {
	Play(context.Context) *connect_go.BidiStreamForClient[v1.PlayRequest, v1.PlayResponse]
}

// NewGameServiceClient constructs a client for the game.v1.GameService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGameServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) GameServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &gameServiceClient{
		play: connect_go.NewClient[v1.PlayRequest, v1.PlayResponse](
			httpClient,
			baseURL+GameServicePlayProcedure,
			opts...,
		),
	}
}

// gameServiceClient implements GameServiceClient.
type gameServiceClient struct {
	play *connect_go.Client[v1.PlayRequest, v1.PlayResponse]
}

// Play calls game.v1.GameService.Play.
func (c *gameServiceClient) Play(ctx context.Context) *connect_go.BidiStreamForClient[v1.PlayRequest, v1.PlayResponse] {
	return c.play.CallBidiStream(ctx)
}

// GameServiceHandler is an implementation of the game.v1.GameService service.
type GameServiceHandler interface {
	Play(context.Context, *connect_go.BidiStream[v1.PlayRequest, v1.PlayResponse]) error
}

// NewGameServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGameServiceHandler(svc GameServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	gameServicePlayHandler := connect_go.NewBidiStreamHandler(
		GameServicePlayProcedure,
		svc.Play,
		opts...,
	)
	return "/game.v1.GameService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GameServicePlayProcedure:
			gameServicePlayHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGameServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGameServiceHandler struct{}

func (UnimplementedGameServiceHandler) Play(context.Context, *connect_go.BidiStream[v1.PlayRequest, v1.PlayResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("game.v1.GameService.Play is not implemented"))
}
